package GrowingProgrammer;

public class Main {

    public static void main(String[] args) {
	    int count = 0;
        for(int n = 2; n < 21; n++) {
            boolean prime = isPrime(n);
            //这里有一个问题是，可以直接在if后面调用method，不需要单独设置一个变量，这样会比较简洁
            if(prime) {
                System.out.println(n);
                count++;
            }
            if (count == 3) {
                break;
            }
            //这里需要注意的是，if可以改成nest if判断，那样会更加容易理解，虽然不改，也是可以的，因为第一个if判断完了之后，总会进入第二个
        }
    }
    //上面我们要完成两个目标，一个是计数，然后是输出前三个素数
    //输入区间控制用for loop
    //素数计数变量要在loop之外设置，这样才能够不会再loop的时候重复设置计数值
    //先计算素数，然后计数，然后判断计数是否达到3

    public static boolean isPrime(int n) {
        if(n <= 1) {
            return false;
        }
        for(int i = 2; i <= n / 2; i++) {
            if(n % i == 0) {
                return false;
            }
        }
        return true;
    }
    //素数的定义：在大于1的自然数中，只能被1和它本身整除的数，就是素数
    //所以上面的筛选条件其实可以改一下，就如果n<=1,就return false

    //然后就是判断一个数怎么就是素数了，被自己和1整除这个事情不用判断了，是一定的；那么现在就关注的是不会被其他整数整除该如何判断
    //除数就是从二开始到n-1之间的闭区间内的所有的数，真的需要这样么？
    // 然后上面的用的算法就是，其实到n/2不能整除就差不多了，因为[2, n-1]，连最小的相除结果就是2，就是n除以自身一般所得出的数
    //所以只要这个除数结果之上都不成立的数，也就是[2, n/2],之间都不成立的话，应该就是不成立了

    //上面是一个算法，但是这个算法是比较麻烦的，因为需要循环很多个loop，还有一个比较简单的办法就是i < = Math.sqrt(n),这样循环次数就会少一些
    //这样的算法就先记住把，这个涉及到数学了，不是我的重点
}
//上面的这个代码是比较成功的，但还有有一些问题是需要总结的
//1、整个代码的需求和设计分析
//2、main里面的代码还可以写得更加简略一些
//3、isPrime函数里面还可以更加简单

//需求：判断一个区间内的数是不是素数，如果是的，输出这个素数，且素数数量加一；当素数的数量达到3的时候就停止程序
//简单来说，就是输入一个区间，输出区间内的前三个素数
//设计：需要有一个method来判断是不是素数的，在main里面需要有一个区间数字输入的机制，还要有一个素数计数的机制
